// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: author.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthorService_AddAuthor_FullMethodName      = "/authors.AuthorService/AddAuthor"
	AuthorService_EditAuthor_FullMethodName     = "/authors.AuthorService/EditAuthor"
	AuthorService_DeleteAuthor_FullMethodName   = "/authors.AuthorService/DeleteAuthor"
	AuthorService_GetAuthor_FullMethodName      = "/authors.AuthorService/GetAuthor"
	AuthorService_GetAuthorExist_FullMethodName = "/authors.AuthorService/GetAuthorExist"
)

// AuthorServiceClient is the client API for AuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorServiceClient interface {
	AddAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*BaseResponseAuthor, error)
	EditAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*BaseResponseAuthor, error)
	DeleteAuthor(ctx context.Context, in *AuthorIdRequest, opts ...grpc.CallOption) (*BaseResponseAuthor, error)
	GetAuthor(ctx context.Context, in *AuthorIdRequest, opts ...grpc.CallOption) (*BaseResponseAuthor, error)
	GetAuthorExist(ctx context.Context, in *AuthorIdRequest, opts ...grpc.CallOption) (*AuthorResponseExist, error)
}

type authorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorServiceClient(cc grpc.ClientConnInterface) AuthorServiceClient {
	return &authorServiceClient{cc}
}

func (c *authorServiceClient) AddAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*BaseResponseAuthor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseAuthor)
	err := c.cc.Invoke(ctx, AuthorService_AddAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) EditAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*BaseResponseAuthor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseAuthor)
	err := c.cc.Invoke(ctx, AuthorService_EditAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) DeleteAuthor(ctx context.Context, in *AuthorIdRequest, opts ...grpc.CallOption) (*BaseResponseAuthor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseAuthor)
	err := c.cc.Invoke(ctx, AuthorService_DeleteAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) GetAuthor(ctx context.Context, in *AuthorIdRequest, opts ...grpc.CallOption) (*BaseResponseAuthor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseAuthor)
	err := c.cc.Invoke(ctx, AuthorService_GetAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) GetAuthorExist(ctx context.Context, in *AuthorIdRequest, opts ...grpc.CallOption) (*AuthorResponseExist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorResponseExist)
	err := c.cc.Invoke(ctx, AuthorService_GetAuthorExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServiceServer is the server API for AuthorService service.
// All implementations must embed UnimplementedAuthorServiceServer
// for forward compatibility.
type AuthorServiceServer interface {
	AddAuthor(context.Context, *AuthorRequest) (*BaseResponseAuthor, error)
	EditAuthor(context.Context, *AuthorRequest) (*BaseResponseAuthor, error)
	DeleteAuthor(context.Context, *AuthorIdRequest) (*BaseResponseAuthor, error)
	GetAuthor(context.Context, *AuthorIdRequest) (*BaseResponseAuthor, error)
	GetAuthorExist(context.Context, *AuthorIdRequest) (*AuthorResponseExist, error)
	mustEmbedUnimplementedAuthorServiceServer()
}

// UnimplementedAuthorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorServiceServer struct{}

func (UnimplementedAuthorServiceServer) AddAuthor(context.Context, *AuthorRequest) (*BaseResponseAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) EditAuthor(context.Context, *AuthorRequest) (*BaseResponseAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) DeleteAuthor(context.Context, *AuthorIdRequest) (*BaseResponseAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) GetAuthor(context.Context, *AuthorIdRequest) (*BaseResponseAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) GetAuthorExist(context.Context, *AuthorIdRequest) (*AuthorResponseExist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorExist not implemented")
}
func (UnimplementedAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {}
func (UnimplementedAuthorServiceServer) testEmbeddedByValue()                       {}

// UnsafeAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServiceServer will
// result in compilation errors.
type UnsafeAuthorServiceServer interface {
	mustEmbedUnimplementedAuthorServiceServer()
}

func RegisterAuthorServiceServer(s grpc.ServiceRegistrar, srv AuthorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorService_ServiceDesc, srv)
}

func _AuthorService_AddAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).AddAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_AddAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).AddAuthor(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_EditAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).EditAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_EditAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).EditAuthor(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_DeleteAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).DeleteAuthor(ctx, req.(*AuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetAuthor(ctx, req.(*AuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_GetAuthorExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetAuthorExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetAuthorExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetAuthorExist(ctx, req.(*AuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorService_ServiceDesc is the grpc.ServiceDesc for AuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authors.AuthorService",
	HandlerType: (*AuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuthor",
			Handler:    _AuthorService_AddAuthor_Handler,
		},
		{
			MethodName: "EditAuthor",
			Handler:    _AuthorService_EditAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _AuthorService_DeleteAuthor_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _AuthorService_GetAuthor_Handler,
		},
		{
			MethodName: "GetAuthorExist",
			Handler:    _AuthorService_GetAuthorExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "author.proto",
}

const (
	AuthorsBooksService_AddAuthorsBooks_FullMethodName    = "/authors.AuthorsBooksService/AddAuthorsBooks"
	AuthorsBooksService_EditAuthorsBooks_FullMethodName   = "/authors.AuthorsBooksService/EditAuthorsBooks"
	AuthorsBooksService_DeleteAuthorsBooks_FullMethodName = "/authors.AuthorsBooksService/DeleteAuthorsBooks"
	AuthorsBooksService_GetAuthorsBooks_FullMethodName    = "/authors.AuthorsBooksService/GetAuthorsBooks"
)

// AuthorsBooksServiceClient is the client API for AuthorsBooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorsBooksServiceClient interface {
	AddAuthorsBooks(ctx context.Context, in *AuthorsBooksRequest, opts ...grpc.CallOption) (*BaseResponseAuthorBooks, error)
	EditAuthorsBooks(ctx context.Context, in *AuthorsBooksRequest, opts ...grpc.CallOption) (*BaseResponseAuthorBooks, error)
	DeleteAuthorsBooks(ctx context.Context, in *AuthorsBooksIdRequest, opts ...grpc.CallOption) (*BaseResponseAuthorBooks, error)
	GetAuthorsBooks(ctx context.Context, in *AuthorsBooksIdRequest, opts ...grpc.CallOption) (*BaseResponseAuthorBooks, error)
}

type authorsBooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorsBooksServiceClient(cc grpc.ClientConnInterface) AuthorsBooksServiceClient {
	return &authorsBooksServiceClient{cc}
}

func (c *authorsBooksServiceClient) AddAuthorsBooks(ctx context.Context, in *AuthorsBooksRequest, opts ...grpc.CallOption) (*BaseResponseAuthorBooks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseAuthorBooks)
	err := c.cc.Invoke(ctx, AuthorsBooksService_AddAuthorsBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorsBooksServiceClient) EditAuthorsBooks(ctx context.Context, in *AuthorsBooksRequest, opts ...grpc.CallOption) (*BaseResponseAuthorBooks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseAuthorBooks)
	err := c.cc.Invoke(ctx, AuthorsBooksService_EditAuthorsBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorsBooksServiceClient) DeleteAuthorsBooks(ctx context.Context, in *AuthorsBooksIdRequest, opts ...grpc.CallOption) (*BaseResponseAuthorBooks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseAuthorBooks)
	err := c.cc.Invoke(ctx, AuthorsBooksService_DeleteAuthorsBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorsBooksServiceClient) GetAuthorsBooks(ctx context.Context, in *AuthorsBooksIdRequest, opts ...grpc.CallOption) (*BaseResponseAuthorBooks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseAuthorBooks)
	err := c.cc.Invoke(ctx, AuthorsBooksService_GetAuthorsBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorsBooksServiceServer is the server API for AuthorsBooksService service.
// All implementations must embed UnimplementedAuthorsBooksServiceServer
// for forward compatibility.
type AuthorsBooksServiceServer interface {
	AddAuthorsBooks(context.Context, *AuthorsBooksRequest) (*BaseResponseAuthorBooks, error)
	EditAuthorsBooks(context.Context, *AuthorsBooksRequest) (*BaseResponseAuthorBooks, error)
	DeleteAuthorsBooks(context.Context, *AuthorsBooksIdRequest) (*BaseResponseAuthorBooks, error)
	GetAuthorsBooks(context.Context, *AuthorsBooksIdRequest) (*BaseResponseAuthorBooks, error)
	mustEmbedUnimplementedAuthorsBooksServiceServer()
}

// UnimplementedAuthorsBooksServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorsBooksServiceServer struct{}

func (UnimplementedAuthorsBooksServiceServer) AddAuthorsBooks(context.Context, *AuthorsBooksRequest) (*BaseResponseAuthorBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthorsBooks not implemented")
}
func (UnimplementedAuthorsBooksServiceServer) EditAuthorsBooks(context.Context, *AuthorsBooksRequest) (*BaseResponseAuthorBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAuthorsBooks not implemented")
}
func (UnimplementedAuthorsBooksServiceServer) DeleteAuthorsBooks(context.Context, *AuthorsBooksIdRequest) (*BaseResponseAuthorBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorsBooks not implemented")
}
func (UnimplementedAuthorsBooksServiceServer) GetAuthorsBooks(context.Context, *AuthorsBooksIdRequest) (*BaseResponseAuthorBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorsBooks not implemented")
}
func (UnimplementedAuthorsBooksServiceServer) mustEmbedUnimplementedAuthorsBooksServiceServer() {}
func (UnimplementedAuthorsBooksServiceServer) testEmbeddedByValue()                             {}

// UnsafeAuthorsBooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorsBooksServiceServer will
// result in compilation errors.
type UnsafeAuthorsBooksServiceServer interface {
	mustEmbedUnimplementedAuthorsBooksServiceServer()
}

func RegisterAuthorsBooksServiceServer(s grpc.ServiceRegistrar, srv AuthorsBooksServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorsBooksServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorsBooksService_ServiceDesc, srv)
}

func _AuthorsBooksService_AddAuthorsBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorsBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsBooksServiceServer).AddAuthorsBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorsBooksService_AddAuthorsBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsBooksServiceServer).AddAuthorsBooks(ctx, req.(*AuthorsBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorsBooksService_EditAuthorsBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorsBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsBooksServiceServer).EditAuthorsBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorsBooksService_EditAuthorsBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsBooksServiceServer).EditAuthorsBooks(ctx, req.(*AuthorsBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorsBooksService_DeleteAuthorsBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorsBooksIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsBooksServiceServer).DeleteAuthorsBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorsBooksService_DeleteAuthorsBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsBooksServiceServer).DeleteAuthorsBooks(ctx, req.(*AuthorsBooksIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorsBooksService_GetAuthorsBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorsBooksIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsBooksServiceServer).GetAuthorsBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorsBooksService_GetAuthorsBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsBooksServiceServer).GetAuthorsBooks(ctx, req.(*AuthorsBooksIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorsBooksService_ServiceDesc is the grpc.ServiceDesc for AuthorsBooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorsBooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authors.AuthorsBooksService",
	HandlerType: (*AuthorsBooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAuthorsBooks",
			Handler:    _AuthorsBooksService_AddAuthorsBooks_Handler,
		},
		{
			MethodName: "EditAuthorsBooks",
			Handler:    _AuthorsBooksService_EditAuthorsBooks_Handler,
		},
		{
			MethodName: "DeleteAuthorsBooks",
			Handler:    _AuthorsBooksService_DeleteAuthorsBooks_Handler,
		},
		{
			MethodName: "GetAuthorsBooks",
			Handler:    _AuthorsBooksService_GetAuthorsBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "author.proto",
}
