// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: booksstocks.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BooksStocksService_AddBooksStocks_FullMethodName    = "/booksstockssstocks.BooksStocksService/AddBooksStocks"
	BooksStocksService_EditBooksStocks_FullMethodName   = "/booksstockssstocks.BooksStocksService/EditBooksStocks"
	BooksStocksService_DeleteBooksStocks_FullMethodName = "/booksstockssstocks.BooksStocksService/DeleteBooksStocks"
	BooksStocksService_GetBooksStocks_FullMethodName    = "/booksstockssstocks.BooksStocksService/GetBooksStocks"
)

// BooksStocksServiceClient is the client API for BooksStocksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BooksStocksServiceClient interface {
	AddBooksStocks(ctx context.Context, in *BooksStocksRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	EditBooksStocks(ctx context.Context, in *BooksStocksRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	DeleteBooksStocks(ctx context.Context, in *BooksStocksIdRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetBooksStocks(ctx context.Context, in *BooksStocksIdRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type booksStocksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBooksStocksServiceClient(cc grpc.ClientConnInterface) BooksStocksServiceClient {
	return &booksStocksServiceClient{cc}
}

func (c *booksStocksServiceClient) AddBooksStocks(ctx context.Context, in *BooksStocksRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, BooksStocksService_AddBooksStocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksStocksServiceClient) EditBooksStocks(ctx context.Context, in *BooksStocksRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, BooksStocksService_EditBooksStocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksStocksServiceClient) DeleteBooksStocks(ctx context.Context, in *BooksStocksIdRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, BooksStocksService_DeleteBooksStocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksStocksServiceClient) GetBooksStocks(ctx context.Context, in *BooksStocksIdRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, BooksStocksService_GetBooksStocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksStocksServiceServer is the server API for BooksStocksService service.
// All implementations must embed UnimplementedBooksStocksServiceServer
// for forward compatibility.
type BooksStocksServiceServer interface {
	AddBooksStocks(context.Context, *BooksStocksRequest) (*BaseResponse, error)
	EditBooksStocks(context.Context, *BooksStocksRequest) (*BaseResponse, error)
	DeleteBooksStocks(context.Context, *BooksStocksIdRequest) (*BaseResponse, error)
	GetBooksStocks(context.Context, *BooksStocksIdRequest) (*BaseResponse, error)
	mustEmbedUnimplementedBooksStocksServiceServer()
}

// UnimplementedBooksStocksServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBooksStocksServiceServer struct{}

func (UnimplementedBooksStocksServiceServer) AddBooksStocks(context.Context, *BooksStocksRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBooksStocks not implemented")
}
func (UnimplementedBooksStocksServiceServer) EditBooksStocks(context.Context, *BooksStocksRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBooksStocks not implemented")
}
func (UnimplementedBooksStocksServiceServer) DeleteBooksStocks(context.Context, *BooksStocksIdRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBooksStocks not implemented")
}
func (UnimplementedBooksStocksServiceServer) GetBooksStocks(context.Context, *BooksStocksIdRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksStocks not implemented")
}
func (UnimplementedBooksStocksServiceServer) mustEmbedUnimplementedBooksStocksServiceServer() {}
func (UnimplementedBooksStocksServiceServer) testEmbeddedByValue()                            {}

// UnsafeBooksStocksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksStocksServiceServer will
// result in compilation errors.
type UnsafeBooksStocksServiceServer interface {
	mustEmbedUnimplementedBooksStocksServiceServer()
}

func RegisterBooksStocksServiceServer(s grpc.ServiceRegistrar, srv BooksStocksServiceServer) {
	// If the following call pancis, it indicates UnimplementedBooksStocksServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BooksStocksService_ServiceDesc, srv)
}

func _BooksStocksService_AddBooksStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksStocksServiceServer).AddBooksStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksStocksService_AddBooksStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksStocksServiceServer).AddBooksStocks(ctx, req.(*BooksStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksStocksService_EditBooksStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksStocksServiceServer).EditBooksStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksStocksService_EditBooksStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksStocksServiceServer).EditBooksStocks(ctx, req.(*BooksStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksStocksService_DeleteBooksStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksStocksIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksStocksServiceServer).DeleteBooksStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksStocksService_DeleteBooksStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksStocksServiceServer).DeleteBooksStocks(ctx, req.(*BooksStocksIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksStocksService_GetBooksStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooksStocksIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksStocksServiceServer).GetBooksStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksStocksService_GetBooksStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksStocksServiceServer).GetBooksStocks(ctx, req.(*BooksStocksIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BooksStocksService_ServiceDesc is the grpc.ServiceDesc for BooksStocksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BooksStocksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booksstockssstocks.BooksStocksService",
	HandlerType: (*BooksStocksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBooksStocks",
			Handler:    _BooksStocksService_AddBooksStocks_Handler,
		},
		{
			MethodName: "EditBooksStocks",
			Handler:    _BooksStocksService_EditBooksStocks_Handler,
		},
		{
			MethodName: "DeleteBooksStocks",
			Handler:    _BooksStocksService_DeleteBooksStocks_Handler,
		},
		{
			MethodName: "GetBooksStocks",
			Handler:    _BooksStocksService_GetBooksStocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booksstocks.proto",
}
